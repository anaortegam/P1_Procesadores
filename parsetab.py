
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMA DOS_PUNTOS FL IGUAL LBRACKET LCORCHETE MAYIGUAL MAYOR MENIGUAL MENOR NULL NUMBER RBRACKET RCORCHETE STR_CON_COMILLAS STR_SIN_COMILLAS TR ajson : LBRACKET contents RBRACKET\n                | LBRACKET RBRACKET\n         contents : key DOS_PUNTOS value opcional\n                     | key DOS_PUNTOS value COMA contents\n         opcional : COMA\n                     |\n         key : STR_CON_COMILLAS\n                | STR_SIN_COMILLAS\n         value : ajson\n                  | operation\n                  | NUMBER\n                  | other\n                  | arrayobjects\n         arrayobjects : LCORCHETE valores RCORCHETE\n                        | LCORCHETE RCORCHETE\n         valores : ajson opcional\n                    | ajson COMA valores\n         operation : menor\n                    | mayor\n                    | igual\n                    | mayigual\n                    | menigual menor : NUMBER MENOR NUMBER mayor : NUMBER MAYOR NUMBER igual : NUMBER IGUAL NUMBER mayigual : NUMBER MAYIGUAL NUMBER menigual : NUMBER MENIGUAL NUMBER other : TR\n                  | FL\n                  | NULL\n                  | STR_CON_COMILLAS\n        '
    
_lr_action_items = {'LBRACKET':([0,9,25,44,],[2,2,2,2,]),'$end':([1,4,8,],[0,-2,-1,]),'RBRACKET':([2,3,4,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,34,36,37,38,39,40,41,42,],[4,8,-2,-1,-6,-9,-10,-11,-12,-13,-18,-19,-20,-21,-22,-28,-29,-30,-31,-3,-5,-15,-4,-23,-24,-25,-26,-27,-14,]),'STR_CON_COMILLAS':([2,9,27,],[6,24,6,]),'STR_SIN_COMILLAS':([2,27,],[7,7,]),'COMA':([4,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,34,35,37,38,39,40,41,42,],[-2,-1,27,-9,-10,-11,-12,-13,-18,-19,-20,-21,-22,-28,-29,-30,-31,-15,44,-23,-24,-25,-26,-27,-14,]),'RCORCHETE':([4,8,25,33,35,43,44,45,],[-2,-1,34,42,-6,-16,-5,-17,]),'DOS_PUNTOS':([5,6,7,],[9,-7,-8,]),'NUMBER':([9,28,29,30,31,32,],[13,37,38,39,40,41,]),'TR':([9,],[21,]),'FL':([9,],[22,]),'NULL':([9,],[23,]),'LCORCHETE':([9,],[25,]),'MENOR':([13,],[28,]),'MAYOR':([13,],[29,]),'IGUAL':([13,],[30,]),'MAYIGUAL':([13,],[31,]),'MENIGUAL':([13,],[32,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ajson':([0,9,25,44,],[1,11,35,35,]),'contents':([2,27,],[3,36,]),'key':([2,27,],[5,5,]),'value':([9,],[10,]),'operation':([9,],[12,]),'other':([9,],[14,]),'arrayobjects':([9,],[15,]),'menor':([9,],[16,]),'mayor':([9,],[17,]),'igual':([9,],[18,]),'mayigual':([9,],[19,]),'menigual':([9,],[20,]),'opcional':([10,35,],[26,43,]),'valores':([25,44,],[33,45,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ajson","S'",1,None,None,None),
  ('ajson -> LBRACKET contents RBRACKET','ajson',3,'p_ajson','ajson_parser.py',12),
  ('ajson -> LBRACKET RBRACKET','ajson',2,'p_ajson','ajson_parser.py',13),
  ('contents -> key DOS_PUNTOS value opcional','contents',4,'p_contents','ajson_parser.py',21),
  ('contents -> key DOS_PUNTOS value COMA contents','contents',5,'p_contents','ajson_parser.py',22),
  ('opcional -> COMA','opcional',1,'p_opcional','ajson_parser.py',29),
  ('opcional -> <empty>','opcional',0,'p_opcional','ajson_parser.py',30),
  ('key -> STR_CON_COMILLAS','key',1,'p_key','ajson_parser.py',33),
  ('key -> STR_SIN_COMILLAS','key',1,'p_key','ajson_parser.py',34),
  ('value -> ajson','value',1,'p_value','ajson_parser.py',39),
  ('value -> operation','value',1,'p_value','ajson_parser.py',40),
  ('value -> NUMBER','value',1,'p_value','ajson_parser.py',41),
  ('value -> other','value',1,'p_value','ajson_parser.py',42),
  ('value -> arrayobjects','value',1,'p_value','ajson_parser.py',43),
  ('arrayobjects -> LCORCHETE valores RCORCHETE','arrayobjects',3,'p_arrayobjects','ajson_parser.py',48),
  ('arrayobjects -> LCORCHETE RCORCHETE','arrayobjects',2,'p_arrayobjects','ajson_parser.py',49),
  ('valores -> ajson opcional','valores',2,'p_valores','ajson_parser.py',54),
  ('valores -> ajson COMA valores','valores',3,'p_valores','ajson_parser.py',55),
  ('operation -> menor','operation',1,'p_operation','ajson_parser.py',63),
  ('operation -> mayor','operation',1,'p_operation','ajson_parser.py',64),
  ('operation -> igual','operation',1,'p_operation','ajson_parser.py',65),
  ('operation -> mayigual','operation',1,'p_operation','ajson_parser.py',66),
  ('operation -> menigual','operation',1,'p_operation','ajson_parser.py',67),
  ('menor -> NUMBER MENOR NUMBER','menor',3,'p_menor','ajson_parser.py',71),
  ('mayor -> NUMBER MAYOR NUMBER','mayor',3,'p_mayor','ajson_parser.py',75),
  ('igual -> NUMBER IGUAL NUMBER','igual',3,'p_igual','ajson_parser.py',79),
  ('mayigual -> NUMBER MAYIGUAL NUMBER','mayigual',3,'p_mayigual','ajson_parser.py',83),
  ('menigual -> NUMBER MENIGUAL NUMBER','menigual',3,'p_menigual','ajson_parser.py',87),
  ('other -> TR','other',1,'p_other','ajson_parser.py',92),
  ('other -> FL','other',1,'p_other','ajson_parser.py',93),
  ('other -> NULL','other',1,'p_other','ajson_parser.py',94),
  ('other -> STR_CON_COMILLAS','other',1,'p_other','ajson_parser.py',95),
]
